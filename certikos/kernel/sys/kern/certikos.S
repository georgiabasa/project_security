# File generated by CompCert 2.3pl2
# Command line: -S
	.data
	.comm	AC_LOC, 1280, 8
	.type	AC_LOC, @object
	.data
	.comm	AT_LOC, 12582912, 8
	.type	AT_LOC, @object
	.data
	.comm	CURID_LOC, 4, 8
	.type	CURID_LOC, @object
	.data
	.comm	IDPMap_LOC, 4194304, 4096
	.type	IDPMap_LOC, @object
	.data
	.comm	KCtxtPool_LOC, 1536, 8
	.type	KCtxtPool_LOC, @object
	.data
	.comm	NPS_LOC, 4, 8
	.type	NPS_LOC, @object
	.data
	.comm	PTPool_LOC, 262144, 4096
	.type	PTPool_LOC, @object
	.data
	.comm	SHRDMEMPOOL_LOC, 49152, 8
	.type	SHRDMEMPOOL_LOC, @object
	.data
	.comm	SYNCCHPOOL_LOC, 768, 8
	.type	SYNCCHPOOL_LOC, @object
	.data
	.comm	TCBPool_LOC, 768, 8
	.type	TCBPool_LOC, @object
	.data
	.comm	TDQPool_LOC, 520, 8
	.type	TDQPool_LOC, @object
	.data
	.comm	UCTX_LOC, 4352, 8
	.type	UCTX_LOC, @object
	.text
	.align	16
	.globl at_get
at_get:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	0(%edx), %eax
	leal	0(,%eax,8), %ecx
	leal	0(%ecx,%eax,4), %eax
	movl	(AT_LOC + 4)(%eax), %eax
	cmpl	$0, %eax
	je	.L100
	movl	$1, %eax
.L100:
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	at_get, @function
	.size	at_get, . - at_get
	.text
	.align	16
	.globl at_get_c
at_get_c:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	0(%edx), %eax
	leal	0(,%eax,8), %ecx
	leal	0(%ecx,%eax,4), %eax
	movl	(AT_LOC + 8)(%eax), %eax
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	at_get_c, @function
	.size	at_get_c, . - at_get_c
	.text
	.align	16
	.globl at_set
at_set:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	0(%edx), %eax
	movl	4(%edx), %ebx
	leal	0(,%eax,8), %edx
	leal	0(%edx,%eax,4), %eax
	movl	%ebx, (AT_LOC + 4)(%eax)
	movl	4(%esp), %ebx
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	at_set, @function
	.size	at_set, . - at_set
	.text
	.align	16
	.globl at_set_c
at_set_c:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	0(%edx), %eax
	movl	4(%edx), %ebx
	leal	0(,%eax,8), %edx
	leal	0(%edx,%eax,4), %eax
	movl	%ebx, (AT_LOC + 8)(%eax)
	movl	4(%esp), %ebx
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	at_set_c, @function
	.size	at_set_c, . - at_set_c
	.text
	.align	16
	.globl clear_shared_mem
clear_shared_mem:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	0(%edx), %eax
	movl	4(%edx), %ebx
	movl	%eax, %ecx
	sall	$8, %ecx
	sall	$9, %eax
	leal	0(%ecx,%eax,1), %ecx
	leal	SHRDMEMPOOL_LOC(%ecx), %eax
	leal	0(,%ebx,8), %edx
	leal	0(%edx,%ebx,4), %edx
	xorl	%ecx, %ecx
	movl	%ecx, 0(%eax,%edx,1)
	movl	$2, %ecx
	movl	%ecx, 4(%eax,%edx,1)
	movl	$1, %ecx
	movl	%ecx, 8(%eax,%edx,1)
	movl	4(%esp), %ebx
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	clear_shared_mem, @function
	.size	clear_shared_mem, . - clear_shared_mem
	.text
	.align	16
	.globl container_alloc
container_alloc:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	0(%edx), %ecx
	movl	%ecx, %edx
	sall	$4, %edx
	leal	0(%edx,%ecx,4), %eax
	movl	(AC_LOC + 4)(%eax), %edx
	movl	AC_LOC(%eax), %ecx
	cmpl	%ecx, %edx
	jne	.L101
	xorl	%eax, %eax
	addl	$12, %esp
	ret
.L101:
	leal	1(%edx), %ecx
	movl	%ecx, (AC_LOC + 4)(%eax)
	addl	$12, %esp
	jmp	palloc
	.cfi_endproc
	.type	container_alloc, @function
	.size	container_alloc, . - container_alloc
	.text
	.align	16
	.globl container_can_consume
container_can_consume:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	0(%edx), %eax
	movl	4(%edx), %ebx
	movl	%eax, %ecx
	sall	$4, %ecx
	leal	0(%ecx,%eax,4), %ecx
	movl	AC_LOC(%ecx), %edx
	cmpl	%edx, %ebx
	ja	.L102
	movl	(AC_LOC + 4)(%ecx), %eax
	subl	%ebx, %edx
	cmpl	%edx, %eax
	ja	.L102
	movl	$1, %eax
	jmp	.L103
.L102:
	xorl	%eax, %eax
.L103:
	movl	4(%esp), %ebx
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	container_can_consume, @function
	.size	container_can_consume, . - container_can_consume
	.text
	.align	16
	.globl container_get_nchildren
container_get_nchildren:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	0(%edx), %eax
	movl	%eax, %ecx
	sall	$4, %ecx
	leal	0(%ecx,%eax,4), %eax
	movl	(AC_LOC + 12)(%eax), %eax
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	container_get_nchildren, @function
	.size	container_get_nchildren, . - container_get_nchildren
	.text
	.align	16
	.globl container_get_parent
container_get_parent:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	0(%edx), %eax
	movl	%eax, %ecx
	sall	$4, %ecx
	leal	0(%ecx,%eax,4), %eax
	movl	(AC_LOC + 8)(%eax), %eax
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	container_get_parent, @function
	.size	container_get_parent, . - container_get_parent
	.text
	.align	16
	.globl container_get_quota
container_get_quota:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	0(%edx), %eax
	movl	%eax, %ecx
	sall	$4, %ecx
	leal	0(%ecx,%eax,4), %eax
	movl	AC_LOC(%eax), %eax
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	container_get_quota, @function
	.size	container_get_quota, . - container_get_quota
	.text
	.align	16
	.globl container_get_usage
container_get_usage:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	0(%edx), %eax
	movl	%eax, %ecx
	sall	$4, %ecx
	leal	0(%ecx,%eax,4), %eax
	movl	(AC_LOC + 4)(%eax), %eax
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	container_get_usage, @function
	.size	container_get_usage, . - container_get_usage
	.text
	.align	16
	.globl container_init
container_init:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 4(%esp)
	movl	%ebx, 8(%esp)
	movl	%esi, 12(%esp)
	movl	%edi, 16(%esp)
	movl	%ebp, 20(%esp)
	movl	0(%edx), %ecx
	movl	%ecx, 0(%esp)
	call	mem_init
	call	get_nps
	movl	%eax, %esi
	xorl	%edi, %edi
	movl	$1, %ebp
.L104:
	cmpl	%esi, %ebp
	jae	.L105
	movl	%ebp, 0(%esp)
	call	is_norm
	movl	%eax, %ebx
	movl	%ebp, 0(%esp)
	call	at_get
	movl	%eax, %edx
	cmpl	$1, %ebx
	sete	%bl
	movzbl	%bl, %ebx
	cmpl	$0, %edx
	sete	%dl
	movzbl	%dl, %edx
	andl	%edx, %ebx
	testl	%ebx, %ebx
	je	.L106
	leal	1(%edi), %edi
.L106:
	leal	1(%ebp), %ebp
	jmp	.L104
.L105:
	movl	%edi, AC_LOC
	xorl	%eax, %eax
	movl	%eax, (AC_LOC + 4)
	xorl	%eax, %eax
	movl	%eax, (AC_LOC + 8)
	xorl	%eax, %eax
	movl	%eax, (AC_LOC + 12)
	movl	$1, %eax
	movl	%eax, (AC_LOC + 16)
	movl	8(%esp), %ebx
	movl	12(%esp), %esi
	movl	16(%esp), %edi
	movl	20(%esp), %ebp
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	container_init, @function
	.size	container_init, . - container_init
	.text
	.align	16
	.globl container_split
container_split:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	%esi, 8(%esp)
	movl	%edi, 12(%esp)
	movl	%ebp, 16(%esp)
	movl	0(%edx), %esi
	movl	4(%edx), %ebx
	movl	%esi, %edx
	sall	$4, %edx
	leal	0(%edx,%esi,4), %ecx
	movl	(AC_LOC + 12)(%ecx), %edx
	leal	0(%esi,%esi,2), %eax
	leal	1(%eax,%edx,1), %eax
	movl	%eax, %edi
	sall	$4, %edi
	leal	0(%edi,%eax,4), %edi
	movl	$1, %ebp
	movl	%ebp, (AC_LOC + 16)(%edi)
	movl	%ebx, AC_LOC(%edi)
	xorl	%ebp, %ebp
	movl	%ebp, (AC_LOC + 4)(%edi)
	movl	%esi, (AC_LOC + 8)(%edi)
	xorl	%esi, %esi
	movl	%esi, (AC_LOC + 12)(%edi)
	movl	(AC_LOC + 4)(%ecx), %esi
	leal	0(%esi,%ebx,1), %ebx
	movl	%ebx, (AC_LOC + 4)(%ecx)
	leal	1(%edx), %edx
	movl	%edx, (AC_LOC + 12)(%ecx)
	movl	4(%esp), %ebx
	movl	8(%esp), %esi
	movl	12(%esp), %edi
	movl	16(%esp), %ebp
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	container_split, @function
	.size	container_split, . - container_split
	.text
	.align	16
	.globl dequeue
dequeue:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	%esi, 16(%esp)
	movl	%edi, 20(%esp)
	movl	0(%edx), %edi
	movl	$64, %ebx
	movl	%edi, 0(%esp)
	call	get_head
	cmpl	$64, %eax
	je	.L107
	movl	%eax, %ebx
	movl	%eax, 0(%esp)
	call	get_next
	movl	%eax, %esi
	cmpl	$64, %esi
	jne	.L108
	movl	$64, %eax
	movl	%edi, 0(%esp)
	movl	%eax, 4(%esp)
	call	set_head
	movl	$64, %ecx
	movl	%edi, 0(%esp)
	movl	%ecx, 4(%esp)
	call	set_tail
	jmp	.L107
.L108:
	movl	$64, %edx
	movl	%esi, 0(%esp)
	movl	%edx, 4(%esp)
	call	set_prev
	movl	%edi, 0(%esp)
	movl	%esi, 4(%esp)
	call	set_head
.L107:
	movl	%ebx, %eax
	movl	12(%esp), %ebx
	movl	16(%esp), %esi
	movl	20(%esp), %edi
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	dequeue, @function
	.size	dequeue, . - dequeue
	.text
	.align	16
	.globl elf_load
elf_load:
	.cfi_startproc
	jmp    __elf_load
	.cfi_endproc
	.type	elf_load, @function
	.size	elf_load, . - elf_load
	.text
	.align	16
	.globl enqueue
enqueue:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	%esi, 16(%esp)
	movl	%edi, 20(%esp)
	movl	0(%edx), %esi
	movl	4(%edx), %edi
	movl	%esi, 0(%esp)
	call	get_tail
	movl	%eax, %ebx
	cmpl	$64, %ebx
	jne	.L109
	movl	$64, %ecx
	movl	%edi, 0(%esp)
	movl	%ecx, 4(%esp)
	call	set_prev
	movl	$64, %edx
	movl	%edi, 0(%esp)
	movl	%edx, 4(%esp)
	call	set_next
	movl	%esi, 0(%esp)
	movl	%edi, 4(%esp)
	call	set_head
	movl	%esi, 0(%esp)
	movl	%edi, 4(%esp)
	call	set_tail
	jmp	.L110
.L109:
	movl	%ebx, 0(%esp)
	movl	%edi, 4(%esp)
	call	set_next
	movl	%edi, 0(%esp)
	movl	%ebx, 4(%esp)
	call	set_prev
	movl	$64, %ecx
	movl	%edi, 0(%esp)
	movl	%ecx, 4(%esp)
	call	set_next
	movl	%esi, 0(%esp)
	movl	%edi, 4(%esp)
	call	set_tail
.L110:
	movl	12(%esp), %ebx
	movl	16(%esp), %esi
	movl	20(%esp), %edi
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	enqueue, @function
	.size	enqueue, . - enqueue
	.text
	.align	16
	.globl get_PDE
get_PDE:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	0(%edx), %eax
	movl	4(%edx), %ebx
	sall	$12, %eax
	leal	PTPool_LOC(%eax), %edx
	movl	0(%edx,%ebx,4), %eax
	shrl	$12, %eax
	movl	4(%esp), %ebx
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	get_PDE, @function
	.size	get_PDE, . - get_PDE
	.text
	.align	16
	.globl get_PTE
get_PTE:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 4(%esp)
	movl	%ebx, 8(%esp)
	movl	0(%edx), %ecx
	movl	4(%edx), %eax
	movl	8(%edx), %ebx
	sall	$12, %ecx
	leal	PTPool_LOC(%ecx), %ecx
	movl	0(%ecx,%eax,4), %edx
	leal	-7(%edx), %eax
	shrl	$12, %eax
	sall	$10, %eax
	leal	0(%eax,%ebx,1), %eax
	movl	%eax, 0(%esp)
	call	fload
	movl	8(%esp), %ebx
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	get_PTE, @function
	.size	get_PTE, . - get_PTE
	.text
	.align	16
	.globl get_curid
get_curid:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	CURID_LOC, %eax
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	get_curid, @function
	.size	get_curid, . - get_curid
	.text
	.align	16
	.globl get_head
get_head:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	0(%edx), %eax
	movl	TDQPool_LOC(,%eax,8), %eax
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	get_head, @function
	.size	get_head, . - get_head
	.text
	.align	16
	.globl get_kernel_pa
get_kernel_pa:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	0(%edx), %eax
	movl	4(%edx), %ebx
	movl	%eax, 0(%esp)
	movl	%ebx, 4(%esp)
	call	pt_read
	shrl	$12, %eax
	sall	$12, %eax
	andl	$4095, %ebx
	leal	0(%eax,%ebx,1), %eax
	movl	12(%esp), %ebx
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	get_kernel_pa, @function
	.size	get_kernel_pa, . - get_kernel_pa
	.text
	.align	16
	.globl get_next
get_next:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	0(%edx), %eax
	leal	0(,%eax,8), %ecx
	leal	0(%ecx,%eax,4), %eax
	movl	(TCBPool_LOC + 8)(%eax), %eax
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	get_next, @function
	.size	get_next, . - get_next
	.text
	.align	16
	.globl get_nps
get_nps:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	NPS_LOC, %eax
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	get_nps, @function
	.size	get_nps, . - get_nps
	.text
	.align	16
	.globl get_prev
get_prev:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	0(%edx), %eax
	leal	0(,%eax,8), %ecx
	leal	0(%ecx,%eax,4), %eax
	movl	(TCBPool_LOC + 4)(%eax), %eax
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	get_prev, @function
	.size	get_prev, . - get_prev
	.text
	.align	16
	.globl get_shared_mem_loc
get_shared_mem_loc:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	0(%edx), %eax
	movl	4(%edx), %ebx
	movl	%eax, %ecx
	sall	$8, %ecx
	sall	$9, %eax
	leal	0(%ecx,%eax,1), %edx
	leal	SHRDMEMPOOL_LOC(%edx), %edx
	leal	0(,%ebx,8), %eax
	leal	0(%eax,%ebx,4), %ecx
	movl	0(%edx,%ecx,1), %eax
	movl	4(%esp), %ebx
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	get_shared_mem_loc, @function
	.size	get_shared_mem_loc, . - get_shared_mem_loc
	.text
	.align	16
	.globl get_shared_mem_seen
get_shared_mem_seen:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	0(%edx), %eax
	movl	4(%edx), %ebx
	movl	%eax, %ecx
	sall	$8, %ecx
	sall	$9, %eax
	leal	0(%ecx,%eax,1), %edx
	leal	SHRDMEMPOOL_LOC(%edx), %edx
	leal	0(,%ebx,8), %eax
	leal	0(%eax,%ebx,4), %ecx
	movl	8(%edx,%ecx,1), %eax
	movl	4(%esp), %ebx
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	get_shared_mem_seen, @function
	.size	get_shared_mem_seen, . - get_shared_mem_seen
	.text
	.align	16
	.globl get_shared_mem_state
get_shared_mem_state:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	0(%edx), %eax
	movl	4(%edx), %ebx
	movl	%eax, %ecx
	sall	$8, %ecx
	sall	$9, %eax
	leal	0(%ecx,%eax,1), %edx
	leal	SHRDMEMPOOL_LOC(%edx), %edx
	leal	0(,%ebx,8), %eax
	leal	0(%eax,%ebx,4), %ecx
	movl	4(%edx,%ecx,1), %eax
	movl	4(%esp), %ebx
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	get_shared_mem_state, @function
	.size	get_shared_mem_state, . - get_shared_mem_state
	.text
	.align	16
	.globl get_shared_mem_status_seen
get_shared_mem_status_seen:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	%esi, 16(%esp)
	movl	0(%edx), %esi
	movl	4(%edx), %ebx
	movl	%ebx, 0(%esp)
	movl	%esi, 4(%esp)
	call	get_shared_mem_state
	cmpl	$1, %eax
	je	.L111
	movl	%esi, 0(%esp)
	movl	%ebx, 4(%esp)
	call	get_shared_mem_state
	jmp	.L112
.L111:
	movl	$1, %eax
.L112:
	movl	12(%esp), %ebx
	movl	16(%esp), %esi
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	get_shared_mem_status_seen, @function
	.size	get_shared_mem_status_seen, . - get_shared_mem_status_seen
	.text
	.align	16
	.globl get_state
get_state:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	0(%edx), %eax
	leal	0(,%eax,8), %ecx
	leal	0(%ecx,%eax,4), %eax
	movl	TCBPool_LOC(%eax), %eax
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	get_state, @function
	.size	get_state, . - get_state
	.text
	.align	16
	.globl get_sync_chan_count
get_sync_chan_count:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	0(%edx), %eax
	leal	0(,%eax,8), %ecx
	leal	0(%ecx,%eax,4), %eax
	movl	(SYNCCHPOOL_LOC + 8)(%eax), %eax
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	get_sync_chan_count, @function
	.size	get_sync_chan_count, . - get_sync_chan_count
	.text
	.align	16
	.globl get_sync_chan_paddr
get_sync_chan_paddr:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	0(%edx), %eax
	leal	0(,%eax,8), %ecx
	leal	0(%ecx,%eax,4), %eax
	movl	(SYNCCHPOOL_LOC + 4)(%eax), %eax
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	get_sync_chan_paddr, @function
	.size	get_sync_chan_paddr, . - get_sync_chan_paddr
	.text
	.align	16
	.globl get_sync_chan_to
get_sync_chan_to:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	0(%edx), %eax
	leal	0(,%eax,8), %ecx
	leal	0(%ecx,%eax,4), %eax
	movl	SYNCCHPOOL_LOC(%eax), %eax
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	get_sync_chan_to, @function
	.size	get_sync_chan_to, . - get_sync_chan_to
	.text
	.align	16
	.globl get_tail
get_tail:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	0(%edx), %eax
	movl	(TDQPool_LOC + 4)(,%eax,8), %eax
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	get_tail, @function
	.size	get_tail, . - get_tail
	.text
	.align	16
	.globl idpde_init
idpde_init:
	.cfi_startproc
	subl	$36, %esp
	.cfi_adjust_cfa_offset	36
	leal	40(%esp), %edx
	movl	%edx, 12(%esp)
	movl	%ebx, 16(%esp)
	movl	%esi, 20(%esp)
	movl	%edi, 24(%esp)
	movl	0(%edx), %ecx
	movl	%ecx, 0(%esp)
	call	container_init
	xorl	%edi, %edi
.L113:
	movl	$259, %esi
.L114:
	xorl	%ebx, %ebx
.L115:
	movl	%edi, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	%esi, 8(%esp)
	call	set_IDPTE
	leal	1(%ebx), %ebx
	cmpl	$1024, %ebx
	jb	.L115
	leal	1(%edi), %edi
	cmpl	$1024, %edi
	jae	.L116
	cmpl	$256, %edi
	jb	.L113
	cmpl	$960, %edi
	jae	.L117
	movl	$3, %esi
	jmp	.L114
.L117:
	movl	$259, %esi
	jmp	.L114
.L116:
	movl	16(%esp), %ebx
	movl	20(%esp), %esi
	movl	24(%esp), %edi
	addl	$36, %esp
	ret
	.cfi_endproc
	.type	idpde_init, @function
	.size	idpde_init, . - idpde_init
	.text
	.align	16
	.globl init_sync_chan
init_sync_chan:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	0(%edx), %ecx
	leal	0(,%ecx,8), %edx
	leal	0(%edx,%ecx,4), %eax
	movl	$64, %edx
	movl	%edx, SYNCCHPOOL_LOC(%eax)
	xorl	%ecx, %ecx
	movl	%ecx, (SYNCCHPOOL_LOC + 4)(%eax)
	xorl	%edx, %edx
	movl	%edx, (SYNCCHPOOL_LOC + 8)(%eax)
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	init_sync_chan, @function
	.size	init_sync_chan, . - init_sync_chan
	.text
	.align	16
	.globl is_norm
is_norm:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	0(%edx), %eax
	leal	0(,%eax,8), %ecx
	leal	0(%ecx,%eax,4), %eax
	movl	AT_LOC(%eax), %eax
	cmpl	$0, %eax
	je	.L118
	cmpl	$1, %eax
	je	.L119
	movl	$1, %eax
	jmp	.L118
.L119:
	xorl	%eax, %eax
.L118:
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	is_norm, @function
	.size	is_norm, . - is_norm
	.text
	.align	16
	.globl kctxt_new
kctxt_new:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	%esi, 16(%esp)
	movl	0(%edx), %esi
	movl	4(%edx), %ebx
	movl	8(%edx), %eax
	movl	%ebx, 0(%esp)
	movl	%eax, 4(%esp)
	call	pt_new
	movl	%eax, %ebx
	cmpl	$64, %ebx
	je	.L120
	movl	%ebx, %eax
	sall	$12, %eax
	leal	(STACK_LOC + 4092)(%eax), %ecx
	movl	%ebx, 0(%esp)
	movl	%ecx, 4(%esp)
	call	set_SP
	movl	%ebx, 0(%esp)
	movl	%esi, 4(%esp)
	call	set_RA
	jmp	.L121
.L120:
	movl	$64, %ebx
.L121:
	movl	%ebx, %eax
	movl	12(%esp), %ebx
	movl	16(%esp), %esi
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	kctxt_new, @function
	.size	kctxt_new, . - kctxt_new
	.text
	.align	16
	.globl kctxt_switch
kctxt_switch:
	.cfi_startproc
	leal	0(%eax,%eax,2), %eax
	leal	KCtxtPool_LOC(,%eax,8), %eax
	movl	%esp, 0(%eax)
	movl	%edi, 4(%eax)
	movl	%esi, 8(%eax)
	movl	%ebx, 12(%eax)
	movl	%ebp, 16(%eax)
	popl	%ecx
	movl	%ecx, 20(%eax)
	leal	0(%edx,%edx,2), %edx
	leal	KCtxtPool_LOC(,%edx,8), %edx
	movl	0(%edx), %esp
	movl	4(%edx), %edi
	movl	8(%edx), %esi
	movl	12(%edx), %ebx
	movl	16(%edx), %ebp
	movl	20(%edx), %ecx
	pushl	%ecx
	xorl	%eax, %eax
	ret
	.cfi_endproc
	.type	kctxt_switch, @function
	.size	kctxt_switch, . - kctxt_switch
	.text
	.align	16
	.globl mem_init
mem_init:
	.cfi_startproc
	subl	$52, %esp
	.cfi_adjust_cfa_offset	52
	leal	56(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	%esi, 16(%esp)
	movl	%edi, 20(%esp)
	movl	%ebp, 24(%esp)
	movl	0(%edx), %edx
	movl	%edx, 0(%esp)
	call	boot_loader
	xorl	%esi, %esi
	call	get_size
	movl	%eax, 44(%esp)
	xorl	%ebx, %ebx
.L122:
	movl	44(%esp), %ecx
	cmpl	%ecx, %esi
	jae	.L123
	movl	%esi, 0(%esp)
	call	get_mms
	movl	%eax, %edi
	movl	%esi, 0(%esp)
	call	get_mml
	leal	0(%edi,%eax,1), %edx
	shrl	$12, %edx
	leal	1(%edx), %eax
	cmpl	%ebx, %eax
	jbe	.L124
	movl	%eax, %ebx
.L124:
	leal	1(%esi), %esi
	jmp	.L122
.L123:
	movl	%ebx, 0(%esp)
	call	set_nps
	xorl	%esi, %esi
.L125:
	cmpl	%ebx, %esi
	jae	.L126
	cmpl	$262144, %esi
	jb	.L127
	cmpl	$983040, %esi
	jae	.L128
	xorl	%edi, %edi
	xorl	%ebp, %ebp
	xorl	%ecx, %ecx
	movl	%ecx, 32(%esp)
.L129:
	movl	44(%esp), %eax
	cmpl	%eax, %edi
	setb	%dl
	movzbl	%dl, %edx
	cmpl	$0, %ebp
	sete	%al
	movzbl	%al, %eax
	andl	%eax, %edx
	testl	%edx, %edx
	je	.L130
	movl	%edi, 0(%esp)
	call	get_mms
	movl	%eax, 36(%esp)
	movl	%edi, 0(%esp)
	call	get_mml
	movl	%eax, 40(%esp)
	movl	%edi, 0(%esp)
	call	is_usable
	movl	%eax, 32(%esp)
	movl	%esi, %edx
	sall	$12, %edx
	movl	36(%esp), %ecx
	cmpl	%edx, %ecx
	ja	.L131
	movl	40(%esp), %eax
	leal	0(%eax,%ecx,1), %ecx
	leal	4096(%edx), %edx
	cmpl	%edx, %ecx
	jb	.L131
	movl	$1, %ebp
.L131:
	leal	1(%edi), %edi
	jmp	.L129
.L130:
	cmpl	$1, %ebp
	je	.L132
	xorl	%edx, %edx
	movl	%esi, 0(%esp)
	movl	%edx, 4(%esp)
	call	set_norm
	jmp	.L133
.L132:
	movl	32(%esp), %edx
	cmpl	$1, %edx
	je	.L134
	xorl	%ecx, %ecx
	movl	%esi, 0(%esp)
	movl	%ecx, 4(%esp)
	call	set_norm
	jmp	.L133
.L134:
	movl	$2, %eax
	movl	%esi, 0(%esp)
	movl	%eax, 4(%esp)
	call	set_norm
	jmp	.L133
.L128:
	movl	$1, %ecx
	movl	%esi, 0(%esp)
	movl	%ecx, 4(%esp)
	call	set_norm
	jmp	.L133
.L127:
	movl	$1, %eax
	movl	%esi, 0(%esp)
	movl	%eax, 4(%esp)
	call	set_norm
.L133:
	leal	1(%esi), %esi
	jmp	.L125
.L126:
	movl	12(%esp), %ebx
	movl	16(%esp), %esi
	movl	20(%esp), %edi
	movl	24(%esp), %ebp
	addl	$52, %esp
	ret
	.cfi_endproc
	.type	mem_init, @function
	.size	mem_init, . - mem_init
	.text
	.align	16
	.globl offer_shared_mem
offer_shared_mem:
	.cfi_startproc
	subl	$36, %esp
	.cfi_adjust_cfa_offset	36
	leal	40(%esp), %edx
	movl	%edx, 12(%esp)
	movl	%ebx, 16(%esp)
	movl	%esi, 20(%esp)
	movl	%edi, 24(%esp)
	movl	0(%edx), %edi
	movl	4(%edx), %ebx
	movl	8(%edx), %esi
	movl	%edi, 0(%esp)
	movl	%ebx, 4(%esp)
	call	get_shared_mem_state
	cmpl	$1, %eax
	je	.L135
	movl	%ebx, 0(%esp)
	movl	%edi, 4(%esp)
	call	get_shared_mem_state
	cmpl	$1, %eax
	jne	.L136
	movl	%edi, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	%esi, 8(%esp)
	call	shared_mem_to_ready
	cmpl	$1048577, %eax
	jne	.L137
	movl	%edi, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	%esi, 8(%esp)
	call	shared_mem_to_dead
	movl	$2, %eax
	jmp	.L138
.L137:
	xorl	%eax, %eax
	jmp	.L138
.L136:
	movl	%edi, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	%esi, 8(%esp)
	call	shared_mem_to_pending
	movl	$1, %eax
	jmp	.L138
.L135:
	movl	$1, %eax
.L138:
	movl	16(%esp), %ebx
	movl	20(%esp), %esi
	movl	24(%esp), %edi
	addl	$36, %esp
	ret
	.cfi_endproc
	.type	offer_shared_mem, @function
	.size	offer_shared_mem, . - offer_shared_mem
	.text
	.align	16
	.globl palloc
palloc:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	%esi, 16(%esp)
	movl	%edi, 20(%esp)
	call	get_nps
	movl	%eax, %edi
	movl	$1, %ebx
	movl	%edi, %esi
.L139:
	cmpl	%edi, %ebx
	setb	%dl
	movzbl	%dl, %edx
	cmpl	%edi, %esi
	sete	%cl
	movzbl	%cl, %ecx
	andl	%ecx, %edx
	testl	%edx, %edx
	je	.L140
	movl	%ebx, 0(%esp)
	call	is_norm
	cmpl	$1, %eax
	jne	.L141
	movl	%ebx, 0(%esp)
	call	at_get
	cmpl	$0, %eax
	jne	.L141
	movl	%ebx, %esi
.L141:
	leal	1(%ebx), %ebx
	jmp	.L139
.L140:
	cmpl	%edi, %esi
	je	.L142
	movl	$1, %ecx
	movl	%esi, 0(%esp)
	movl	%ecx, 4(%esp)
	call	at_set
	xorl	%eax, %eax
	movl	%esi, 0(%esp)
	movl	%eax, 4(%esp)
	call	at_set_c
	jmp	.L143
.L142:
	xorl	%esi, %esi
.L143:
	movl	%esi, %eax
	movl	12(%esp), %ebx
	movl	16(%esp), %esi
	movl	20(%esp), %edi
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	palloc, @function
	.size	palloc, . - palloc
	.text
	.align	16
	.globl pfree
pfree:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 8(%esp)
	movl	0(%edx), %ecx
	xorl	%edx, %edx
	movl	%ecx, 0(%esp)
	movl	%edx, 4(%esp)
	call	at_set
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	pfree, @function
	.size	pfree, . - pfree
	.text
	.align	16
	.globl pgf_handler
pgf_handler:
	.cfi_startproc
	call	proc_exit_user
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 4(%esp)
	call	trap_get
	movl	%eax, 0(%esp)
	call	ptfault_resv
	addl	$12, %esp
	call	proc_start_user
	.cfi_endproc
	.type	pgf_handler, @function
	.size	pgf_handler, . - pgf_handler
	.text
	.align	16
	.globl pmap_init
pmap_init:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 4(%esp)
	movl	0(%edx), %eax
	movl	%eax, 0(%esp)
	call	pt_init
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	pmap_init, @function
	.size	pmap_init, . - pmap_init
	.text
	.align	16
	.globl print
print:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 12(%esp)
	movl	%ebx, 16(%esp)
	call	get_curid
	movl	%eax, %ebx
	call	uctx_arg2
	movl	%ebx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	%eax, 8(%esp)
	call	device_output
	xorl	%ecx, %ecx
	movl	%ecx, 0(%esp)
	call	uctx_set_errno
	movl	16(%esp), %ebx
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	print, @function
	.size	print, . - print
	.text
	.align	16
	.globl proc_create
proc_create:
	.cfi_startproc
	subl	$36, %esp
	.cfi_adjust_cfa_offset	36
	leal	40(%esp), %edx
	movl	%edx, 12(%esp)
	movl	%ebx, 16(%esp)
	movl	%esi, 20(%esp)
	movl	%edi, 24(%esp)
	movl	0(%edx), %edi
	movl	4(%edx), %esi
	movl	8(%edx), %ebx
	call	get_curid
	leal	proc_start_user, %ecx
	movl	%ecx, 0(%esp)
	movl	%eax, 4(%esp)
	movl	%ebx, 8(%esp)
	call	thread_spawn
	movl	%eax, %ebx
	movl	%edi, 0(%esp)
	movl	%ebx, 4(%esp)
	call	elf_load
	movl	$8, %edx
	movl	$35, %eax
	movl	%ebx, 0(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, 8(%esp)
	call	uctx_set
	movl	$9, %eax
	movl	$35, %edx
	movl	%ebx, 0(%esp)
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	call	uctx_set
	movl	$13, %eax
	movl	$27, %edx
	movl	%ebx, 0(%esp)
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	call	uctx_set
	movl	$16, %edx
	movl	$35, %ecx
	movl	%ebx, 0(%esp)
	movl	%edx, 4(%esp)
	movl	%ecx, 8(%esp)
	call	uctx_set
	movl	$15, %edx
	movl	$-268435456, %eax
	movl	%ebx, 0(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, 8(%esp)
	call	uctx_set
	movl	$14, %eax
	movl	$512, %edx
	movl	%ebx, 0(%esp)
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	call	uctx_set
	movl	%ebx, 0(%esp)
	movl	%esi, 4(%esp)
	call	uctx_set_eip
	movl	%ebx, %eax
	movl	16(%esp), %ebx
	movl	20(%esp), %esi
	movl	24(%esp), %edi
	addl	$36, %esp
	ret
	.cfi_endproc
	.type	proc_create, @function
	.size	proc_create, . - proc_create
	.text
	.align	16
	.globl proc_exit_user
proc_exit_user:
	.cfi_startproc
	popl	%ebx
	call	trap_in
	call	save_uctx
	pushl	%ebx
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 4(%esp)
	movl	$0, %eax
	movl	%eax, 0(%esp)
	call	set_pt
	call	pt_in
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	proc_exit_user, @function
	.size	proc_exit_user, . - proc_exit_user
	.text
	.align	16
	.globl proc_init
proc_init:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 4(%esp)
	movl	%ebx, 8(%esp)
	movl	0(%edx), %eax
	movl	%eax, 0(%esp)
	call	sched_init
	xorl	%ebx, %ebx
.L144:
	movl	%ebx, 0(%esp)
	call	init_sync_chan
	leal	1(%ebx), %ebx
	cmpl	$64, %ebx
	jb	.L144
	movl	8(%esp), %ebx
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	proc_init, @function
	.size	proc_init, . - proc_init
	.text
	.align	16
	.globl proc_start_user
proc_start_user:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 4(%esp)
	call	get_curid
	movl	%eax, 0(%esp)
	call    tss_switch
	call	pt_out
	call	set_pt
	jmp	restore_uctx
	.cfi_endproc
	.type	proc_start_user, @function
	.size	proc_start_user, . - proc_start_user
	.text
	.align	16
	.globl pt_alloc_pde
pt_alloc_pde:
	.cfi_startproc
	subl	$36, %esp
	.cfi_adjust_cfa_offset	36
	leal	40(%esp), %edx
	movl	%edx, 12(%esp)
	movl	%ebx, 16(%esp)
	movl	%esi, 20(%esp)
	movl	%edi, 24(%esp)
	movl	%ebp, 28(%esp)
	movl	0(%edx), %edi
	movl	4(%edx), %esi
	movl	%edi, 0(%esp)
	call	container_alloc
	movl	%eax, %ebx
	cmpl	$0, %ebx
	je	.L145
	movl	%edi, 0(%esp)
	movl	%esi, 4(%esp)
	movl	%ebx, 8(%esp)
	call	pt_insert_pde
	shrl	$22, %esi
	xorl	%ebp, %ebp
.L146:
	movl	%edi, 0(%esp)
	movl	%esi, 4(%esp)
	movl	%ebp, 8(%esp)
	call	rmv_PTE
	leal	1(%ebp), %ebp
	cmpl	$1024, %ebp
	jb	.L146
.L145:
	movl	%ebx, %eax
	movl	16(%esp), %ebx
	movl	20(%esp), %esi
	movl	24(%esp), %edi
	movl	28(%esp), %ebp
	addl	$36, %esp
	ret
	.cfi_endproc
	.type	pt_alloc_pde, @function
	.size	pt_alloc_pde, . - pt_alloc_pde
	.text
	.align	16
	.globl pt_free_pde
pt_free_pde:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	%esi, 16(%esp)
	movl	%edi, 20(%esp)
	movl	0(%edx), %edi
	movl	4(%edx), %esi
	movl	%edi, 0(%esp)
	movl	%esi, 4(%esp)
	call	pt_read_pde
	movl	%eax, %ebx
	movl	%edi, 0(%esp)
	movl	%esi, 4(%esp)
	call	pt_rmv_pde
	movl	%ebx, 0(%esp)
	call	pfree
	movl	12(%esp), %ebx
	movl	16(%esp), %esi
	movl	20(%esp), %edi
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	pt_free_pde, @function
	.size	pt_free_pde, . - pt_free_pde
	.text
	.align	16
	.globl pt_in
pt_in:
	.cfi_startproc
	ret
	.cfi_endproc
	.type	pt_in, @function
	.size	pt_in, . - pt_in
	.text
	.align	16
	.globl pt_init
pt_init:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 4(%esp)
	movl	0(%edx), %eax
	movl	%eax, 0(%esp)
	call	pt_init_kern
	xorl	%ecx, %ecx
	movl	%ecx, 0(%esp)
	call	set_pt
	addl	$12, %esp
	jmp	set_pg
	.cfi_endproc
	.type	pt_init, @function
	.size	pt_init, . - pt_init
	.text
	.align	16
	.globl pt_init_comm
pt_init_comm:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	%esi, 16(%esp)
	movl	0(%edx), %eax
	movl	%eax, 0(%esp)
	call	idpde_init
	xorl	%ebx, %ebx
.L147:
	xorl	%esi, %esi
.L148:
	movl	%ebx, 0(%esp)
	movl	%esi, 4(%esp)
	call	set_PDE
.L149:
	leal	1(%esi), %esi
	cmpl	$1024, %esi
	jae	.L150
	cmpl	$256, %esi
	jb	.L148
	cmpl	$960, %esi
	jae	.L151
	movl	%ebx, 0(%esp)
	movl	%esi, 4(%esp)
	call	rmv_PDE
	jmp	.L149
.L151:
	movl	%ebx, 0(%esp)
	movl	%esi, 4(%esp)
	call	set_PDE
	jmp	.L149
.L150:
	leal	1(%ebx), %ebx
	cmpl	$64, %ebx
	jb	.L147
	movl	12(%esp), %ebx
	movl	16(%esp), %esi
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	pt_init_comm, @function
	.size	pt_init_comm, . - pt_init_comm
	.text
	.align	16
	.globl pt_init_kern
pt_init_kern:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	0(%edx), %ecx
	movl	%ecx, 0(%esp)
	call	pt_init_comm
	movl	$256, %ebx
.L152:
	xorl	%edx, %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	call	set_PDE
	leal	1(%ebx), %ebx
	cmpl	$960, %ebx
	jb	.L152
	movl	12(%esp), %ebx
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	pt_init_kern, @function
	.size	pt_init_kern, . - pt_init_kern
	.text
	.align	16
	.globl pt_insert
pt_insert:
	.cfi_startproc
	subl	$52, %esp
	.cfi_adjust_cfa_offset	52
	leal	56(%esp), %edx
	movl	%edx, 16(%esp)
	movl	%ebx, 20(%esp)
	movl	%esi, 24(%esp)
	movl	%edi, 28(%esp)
	movl	%ebp, 32(%esp)
	movl	0(%edx), %ebp
	movl	4(%edx), %edi
	movl	8(%edx), %esi
	movl	12(%edx), %edx
	movl	%edx, 40(%esp)
	movl	%ebp, 0(%esp)
	movl	%edi, 4(%esp)
	call	pt_read_pde
	cmpl	$0, %eax
	jne	.L153
	movl	%ebp, 0(%esp)
	movl	%edi, 4(%esp)
	call	pt_alloc_pde
	movl	%eax, %ebx
	cmpl	$0, %ebx
	jne	.L154
	movl	$1048577, %ebx
	jmp	.L155
.L154:
	cmpl	$1048577, %ebx
	jne	.L156
	jmp	.L155
.L153:
	xorl	%ebx, %ebx
.L156:
	movl	%ebp, 0(%esp)
	movl	%edi, 4(%esp)
	movl	%esi, 8(%esp)
	movl	40(%esp), %edx
	movl	%edx, 12(%esp)
	call	pt_insert_aux
	movl	%esi, 0(%esp)
	call	at_get_c
	leal	1(%eax), %ecx
	movl	%esi, 0(%esp)
	movl	%ecx, 4(%esp)
	call	at_set_c
.L155:
	movl	%ebx, %eax
	movl	20(%esp), %ebx
	movl	24(%esp), %esi
	movl	28(%esp), %edi
	movl	32(%esp), %ebp
	addl	$52, %esp
	ret
	.cfi_endproc
	.type	pt_insert, @function
	.size	pt_insert, . - pt_insert
	.text
	.align	16
	.globl pt_insert_aux
pt_insert_aux:
	.cfi_startproc
	subl	$44, %esp
	.cfi_adjust_cfa_offset	44
	leal	48(%esp), %edx
	movl	%edx, 20(%esp)
	movl	%ebx, 24(%esp)
	movl	%esi, 28(%esp)
	movl	%edi, 32(%esp)
	movl	0(%edx), %esi
	movl	4(%edx), %eax
	movl	8(%edx), %edi
	movl	12(%edx), %ebx
	movl	%eax, %ecx
	shrl	$22, %ecx
	shrl	$12, %eax
	andl	$1023, %eax
	movl	%esi, 0(%esp)
	movl	%ecx, 4(%esp)
	movl	%eax, 8(%esp)
	movl	%edi, 12(%esp)
	movl	%ebx, 16(%esp)
	call	set_PTE
	movl	24(%esp), %ebx
	movl	28(%esp), %esi
	movl	32(%esp), %edi
	addl	$44, %esp
	ret
	.cfi_endproc
	.type	pt_insert_aux, @function
	.size	pt_insert_aux, . - pt_insert_aux
	.text
	.align	16
	.globl pt_insert_pde
pt_insert_pde:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 12(%esp)
	movl	%ebx, 16(%esp)
	movl	%esi, 20(%esp)
	movl	0(%edx), %esi
	movl	4(%edx), %eax
	movl	8(%edx), %ebx
	shrl	$22, %eax
	movl	%esi, 0(%esp)
	movl	%eax, 4(%esp)
	movl	%ebx, 8(%esp)
	call	set_PDEU
	movl	16(%esp), %ebx
	movl	20(%esp), %esi
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	pt_insert_pde, @function
	.size	pt_insert_pde, . - pt_insert_pde
	.text
	.align	16
	.globl pt_new
pt_new:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	0(%edx), %ecx
	movl	4(%edx), %ebx
	movl	%ecx, 0(%esp)
	movl	%ebx, 4(%esp)
	call	container_split
	movl	12(%esp), %ebx
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	pt_new, @function
	.size	pt_new, . - pt_new
	.text
	.align	16
	.globl pt_out
pt_out:
	.cfi_startproc
	ret
	.cfi_endproc
	.type	pt_out, @function
	.size	pt_out, . - pt_out
	.text
	.align	16
	.globl pt_read
pt_read:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 12(%esp)
	movl	%ebx, 16(%esp)
	movl	0(%edx), %ebx
	movl	4(%edx), %eax
	movl	%eax, %ecx
	shrl	$22, %ecx
	shrl	$12, %eax
	andl	$1023, %eax
	movl	%ebx, 0(%esp)
	movl	%ecx, 4(%esp)
	movl	%eax, 8(%esp)
	call	get_PTE
	movl	16(%esp), %ebx
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	pt_read, @function
	.size	pt_read, . - pt_read
	.text
	.align	16
	.globl pt_read_pde
pt_read_pde:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	0(%edx), %ebx
	movl	4(%edx), %eax
	shrl	$22, %eax
	movl	%ebx, 0(%esp)
	movl	%eax, 4(%esp)
	call	get_PDE
	movl	12(%esp), %ebx
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	pt_read_pde, @function
	.size	pt_read_pde, . - pt_read_pde
	.text
	.align	16
	.globl pt_resv
pt_resv:
	.cfi_startproc
	subl	$36, %esp
	.cfi_adjust_cfa_offset	36
	leal	40(%esp), %edx
	movl	%edx, 16(%esp)
	movl	%ebx, 20(%esp)
	movl	%esi, 24(%esp)
	movl	%edi, 28(%esp)
	movl	0(%edx), %edi
	movl	4(%edx), %esi
	movl	8(%edx), %ebx
	movl	%edi, 0(%esp)
	call	container_alloc
	cmpl	$0, %eax
	je	.L157
	movl	%edi, 0(%esp)
	movl	%esi, 4(%esp)
	movl	%eax, 8(%esp)
	movl	%ebx, 12(%esp)
	call	pt_insert
	jmp	.L158
.L157:
	movl	$1048577, %eax
.L158:
	movl	20(%esp), %ebx
	movl	24(%esp), %esi
	movl	28(%esp), %edi
	addl	$36, %esp
	ret
	.cfi_endproc
	.type	pt_resv, @function
	.size	pt_resv, . - pt_resv
	.text
	.align	16
	.globl pt_resv2
pt_resv2:
	.cfi_startproc
	subl	$60, %esp
	.cfi_adjust_cfa_offset	60
	leal	64(%esp), %edx
	movl	%edx, 16(%esp)
	movl	%ebx, 20(%esp)
	movl	%esi, 24(%esp)
	movl	%edi, 28(%esp)
	movl	%ebp, 32(%esp)
	movl	0(%edx), %edi
	movl	4(%edx), %esi
	movl	8(%edx), %ecx
	movl	%ecx, 40(%esp)
	movl	12(%edx), %ecx
	movl	%ecx, 44(%esp)
	movl	16(%edx), %ebx
	movl	20(%edx), %ecx
	movl	%ecx, 48(%esp)
	movl	%edi, 0(%esp)
	call	container_alloc
	movl	%eax, %ebp
	cmpl	$0, %ebp
	je	.L159
	movl	%edi, 0(%esp)
	movl	%esi, 4(%esp)
	movl	%ebp, 8(%esp)
	movl	40(%esp), %eax
	movl	%eax, 12(%esp)
	call	pt_insert
	cmpl	$1048577, %eax
	je	.L160
	movl	44(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	%ebp, 8(%esp)
	movl	48(%esp), %edx
	movl	%edx, 12(%esp)
	call	pt_insert
	jmp	.L160
.L159:
	movl	$1048577, %eax
.L160:
	movl	20(%esp), %ebx
	movl	24(%esp), %esi
	movl	28(%esp), %edi
	movl	32(%esp), %ebp
	addl	$60, %esp
	ret
	.cfi_endproc
	.type	pt_resv2, @function
	.size	pt_resv2, . - pt_resv2
	.text
	.align	16
	.globl pt_rmv
pt_rmv:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	%esi, 16(%esp)
	movl	%edi, 20(%esp)
	movl	0(%edx), %edi
	movl	4(%edx), %esi
	movl	%edi, 0(%esp)
	movl	%esi, 4(%esp)
	call	pt_read
	movl	%eax, %ebx
	cmpl	$0, %ebx
	je	.L161
	movl	%edi, 0(%esp)
	movl	%esi, 4(%esp)
	call	pt_rmv_aux
	movl	%ebx, %eax
	shrl	$12, %eax
	movl	%eax, 0(%esp)
	call	at_get_c
	cmpl	$0, %eax
	jbe	.L161
	movl	%ebx, %ecx
	shrl	$12, %ecx
	leal	-1(%eax), %eax
	movl	%ecx, 0(%esp)
	movl	%eax, 4(%esp)
	call	at_set_c
.L161:
	movl	%ebx, %eax
	shrl	$12, %eax
	movl	12(%esp), %ebx
	movl	16(%esp), %esi
	movl	20(%esp), %edi
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	pt_rmv, @function
	.size	pt_rmv, . - pt_rmv
	.text
	.align	16
	.globl pt_rmv_aux
pt_rmv_aux:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 12(%esp)
	movl	%ebx, 16(%esp)
	movl	0(%edx), %ebx
	movl	4(%edx), %eax
	movl	%eax, %ecx
	shrl	$22, %ecx
	shrl	$12, %eax
	andl	$1023, %eax
	movl	%ebx, 0(%esp)
	movl	%ecx, 4(%esp)
	movl	%eax, 8(%esp)
	call	rmv_PTE
	movl	16(%esp), %ebx
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	pt_rmv_aux, @function
	.size	pt_rmv_aux, . - pt_rmv_aux
	.text
	.align	16
	.globl pt_rmv_pde
pt_rmv_pde:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	0(%edx), %ebx
	movl	4(%edx), %eax
	shrl	$22, %eax
	movl	%ebx, 0(%esp)
	movl	%eax, 4(%esp)
	call	rmv_PDE
	movl	12(%esp), %ebx
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	pt_rmv_pde, @function
	.size	pt_rmv_pde, . - pt_rmv_pde
	.text
	.align	16
	.globl ptfault_resv
ptfault_resv:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 12(%esp)
	movl	%ebx, 16(%esp)
	movl	%esi, 20(%esp)
	movl	0(%edx), %esi
	call	get_curid
	movl	%eax, %edx
	cmpl	$1073741824, %esi
	setae	%bl
	movzbl	%bl, %ebx
	cmpl	$-268435456, %esi
	setb	%al
	movzbl	%al, %eax
	andl	%eax, %ebx
	testl	%ebx, %ebx
	je	.L162
	movl	$7, %eax
	movl	%edx, 0(%esp)
	movl	%esi, 4(%esp)
	movl	%eax, 8(%esp)
	call	pt_resv
.L162:
	movl	16(%esp), %ebx
	movl	20(%esp), %esi
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	ptfault_resv, @function
	.size	ptfault_resv, . - ptfault_resv
	.text
	.align	16
	.globl queue_rmv
queue_rmv:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	%esi, 16(%esp)
	movl	%edi, 20(%esp)
	movl	0(%edx), %edi
	movl	4(%edx), %ebx
	movl	%ebx, 0(%esp)
	call	get_prev
	movl	%eax, %esi
	movl	%ebx, 0(%esp)
	call	get_next
	movl	%eax, %ebx
	cmpl	$64, %esi
	jne	.L163
	cmpl	$64, %ebx
	jne	.L164
	movl	$64, %ecx
	movl	%edi, 0(%esp)
	movl	%ecx, 4(%esp)
	call	set_head
	movl	$64, %ecx
	movl	%edi, 0(%esp)
	movl	%ecx, 4(%esp)
	call	set_tail
	jmp	.L165
.L164:
	movl	$64, %ecx
	movl	%ebx, 0(%esp)
	movl	%ecx, 4(%esp)
	call	set_prev
	movl	%edi, 0(%esp)
	movl	%ebx, 4(%esp)
	call	set_head
	jmp	.L165
.L163:
	cmpl	$64, %ebx
	jne	.L166
	movl	$64, %ecx
	movl	%esi, 0(%esp)
	movl	%ecx, 4(%esp)
	call	set_next
	movl	%edi, 0(%esp)
	movl	%esi, 4(%esp)
	call	set_tail
	jmp	.L165
.L166:
	cmpl	%ebx, %esi
	je	.L167
	movl	%esi, 0(%esp)
	movl	%ebx, 4(%esp)
	call	set_next
.L167:
	movl	%ebx, 0(%esp)
	movl	%esi, 4(%esp)
	call	set_prev
.L165:
	movl	12(%esp), %ebx
	movl	16(%esp), %esi
	movl	20(%esp), %edi
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	queue_rmv, @function
	.size	queue_rmv, . - queue_rmv
	.text
	.align	16
	.globl restore_uctx
restore_uctx:
	.cfi_startproc
	movl	0(%esp), %eax
	sall	$2, %eax
	movl	%eax, %edx
	sall	$4, %eax
	leal	UCTX_LOC(%edx,%eax,1), %eax
	leal	32(%eax), %esp
	movl	0(%eax), %edi
	movl	4(%eax), %esi
	movl	8(%eax), %ebp
	movl	16(%eax), %ebx
	movl	20(%eax), %edx
	movl	24(%eax), %ecx
	movl	28(%eax), %eax
	jmp	trap_out
	.cfi_endproc
	.type	restore_uctx, @function
	.size	restore_uctx, . - restore_uctx
	.text
	.align	16
	.globl rmv_PDE
rmv_PDE:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	0(%edx), %eax
	movl	4(%edx), %ebx
	sall	$12, %eax
	leal	PTPool_LOC(%eax), %edx
	xorl	%eax, %eax
	movl	%eax, 0(%edx,%ebx,4)
	movl	4(%esp), %ebx
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	rmv_PDE, @function
	.size	rmv_PDE, . - rmv_PDE
	.text
	.align	16
	.globl rmv_PTE
rmv_PTE:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	0(%edx), %eax
	movl	4(%edx), %ecx
	movl	8(%edx), %ebx
	sall	$12, %eax
	leal	PTPool_LOC(%eax), %edx
	movl	0(%edx,%ecx,4), %eax
	leal	-7(%eax), %ecx
	shrl	$12, %ecx
	sall	$10, %ecx
	leal	0(%ecx,%ebx,1), %eax
	xorl	%ecx, %ecx
	movl	%eax, 0(%esp)
	movl	%ecx, 4(%esp)
	call	fstore
	movl	12(%esp), %ebx
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	rmv_PTE, @function
	.size	rmv_PTE, . - rmv_PTE
	.text
	.align	16
	.globl save_uctx
save_uctx:
	.cfi_startproc
	subl	$84, %esp
	.cfi_adjust_cfa_offset	84
	leal	88(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	%esi, 8(%esp)
	movl	%edi, 12(%esp)
	movl	%ebp, 16(%esp)
	movl	0(%edx), %eax
	movl	%eax, 24(%esp)
	movl	4(%edx), %eax
	movl	%eax, 28(%esp)
	movl	8(%edx), %eax
	movl	%eax, 36(%esp)
	movl	12(%edx), %eax
	movl	%eax, 40(%esp)
	movl	16(%edx), %eax
	movl	%eax, 44(%esp)
	movl	20(%edx), %eax
	movl	%eax, 48(%esp)
	movl	24(%edx), %ebp
	movl	28(%edx), %eax
	movl	%eax, 56(%esp)
	movl	32(%edx), %eax
	movl	%eax, 52(%esp)
	movl	36(%edx), %edi
	movl	40(%edx), %eax
	movl	%eax, 60(%esp)
	movl	44(%edx), %eax
	movl	%eax, 32(%esp)
	movl	48(%edx), %esi
	movl	52(%edx), %ebx
	movl	56(%edx), %eax
	movl	%eax, 64(%esp)
	movl	60(%edx), %eax
	movl	%eax, 68(%esp)
	movl	64(%edx), %eax
	movl	%eax, 72(%esp)
	call	get_curid
	movl	%eax, %ecx
	sall	$6, %ecx
	leal	0(%ecx,%eax,4), %ecx
	movl	24(%esp), %edx
	movl	%edx, UCTX_LOC(%ecx)
	movl	28(%esp), %edx
	movl	%edx, (UCTX_LOC + 4)(%ecx)
	movl	36(%esp), %edx
	movl	%edx, (UCTX_LOC + 8)(%ecx)
	movl	40(%esp), %eax
	movl	%eax, (UCTX_LOC + 12)(%ecx)
	movl	44(%esp), %edx
	movl	%edx, (UCTX_LOC + 16)(%ecx)
	movl	48(%esp), %edx
	movl	%edx, (UCTX_LOC + 20)(%ecx)
	movl	%ebp, (UCTX_LOC + 24)(%ecx)
	movl	56(%esp), %eax
	movl	%eax, (UCTX_LOC + 28)(%ecx)
	movl	52(%esp), %edx
	movl	%edx, (UCTX_LOC + 32)(%ecx)
	movl	%edi, (UCTX_LOC + 36)(%ecx)
	movl	60(%esp), %edx
	movl	%edx, (UCTX_LOC + 40)(%ecx)
	movl	32(%esp), %eax
	movl	%eax, (UCTX_LOC + 44)(%ecx)
	movl	%esi, (UCTX_LOC + 48)(%ecx)
	movl	%ebx, (UCTX_LOC + 52)(%ecx)
	movl	64(%esp), %eax
	movl	%eax, (UCTX_LOC + 56)(%ecx)
	movl	68(%esp), %edx
	movl	%edx, (UCTX_LOC + 60)(%ecx)
	movl	72(%esp), %edx
	movl	%edx, (UCTX_LOC + 64)(%ecx)
	movl	4(%esp), %ebx
	movl	8(%esp), %esi
	movl	12(%esp), %edi
	movl	16(%esp), %ebp
	addl	$84, %esp
	ret
	.cfi_endproc
	.type	save_uctx, @function
	.size	save_uctx, . - save_uctx
	.text
	.align	16
	.globl sched_init
sched_init:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 8(%esp)
	movl	0(%edx), %eax
	movl	%eax, 0(%esp)
	call	tdqueue_init
	xorl	%edx, %edx
	movl	%edx, 0(%esp)
	call	set_curid
	xorl	%ecx, %ecx
	movl	$1, %edx
	movl	%ecx, 0(%esp)
	movl	%edx, 4(%esp)
	call	set_state
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	sched_init, @function
	.size	sched_init, . - sched_init
	.text
	.align	16
	.globl set_IDPTE
set_IDPTE:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	%esi, 8(%esp)
	movl	0(%edx), %eax
	movl	4(%edx), %ebx
	movl	8(%edx), %esi
	movl	%eax, %ecx
	sall	$12, %ecx
	leal	IDPMap_LOC(%ecx), %ecx
	sall	$10, %eax
	leal	0(%eax,%ebx,1), %edx
	sall	$12, %edx
	leal	0(%edx,%esi,1), %edx
	movl	%edx, 0(%ecx,%ebx,4)
	movl	4(%esp), %ebx
	movl	8(%esp), %esi
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	set_IDPTE, @function
	.size	set_IDPTE, . - set_IDPTE
	.text
	.align	16
	.globl set_PDE
set_PDE:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	0(%edx), %ecx
	movl	4(%edx), %eax
	sall	$12, %ecx
	leal	PTPool_LOC(%ecx), %edx
	movl	%eax, %ecx
	sall	$12, %ecx
	leal	(IDPMap_LOC + 7)(%ecx), %ecx
	movl	%ecx, 0(%edx,%eax,4)
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	set_PDE, @function
	.size	set_PDE, . - set_PDE
	.text
	.align	16
	.globl set_PDEU
set_PDEU:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	0(%edx), %ecx
	movl	4(%edx), %ebx
	movl	8(%edx), %eax
	sall	$12, %ecx
	leal	PTPool_LOC(%ecx), %ecx
	sall	$12, %eax
	leal	7(%eax), %edx
	movl	%edx, 0(%ecx,%ebx,4)
	movl	4(%esp), %ebx
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	set_PDEU, @function
	.size	set_PDEU, . - set_PDEU
	.text
	.align	16
	.globl set_PTE
set_PTE:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	%esi, 16(%esp)
	movl	%edi, 20(%esp)
	movl	0(%edx), %ecx
	movl	4(%edx), %edi
	movl	8(%edx), %ebx
	movl	12(%edx), %eax
	movl	16(%edx), %esi
	sall	$12, %ecx
	leal	PTPool_LOC(%ecx), %ecx
	movl	0(%ecx,%edi,4), %edx
	leal	-7(%edx), %ecx
	shrl	$12, %ecx
	sall	$10, %ecx
	leal	0(%ecx,%ebx,1), %ecx
	sall	$12, %eax
	leal	0(%eax,%esi,1), %edx
	movl	%ecx, 0(%esp)
	movl	%edx, 4(%esp)
	call	fstore
	movl	12(%esp), %ebx
	movl	16(%esp), %esi
	movl	20(%esp), %edi
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	set_PTE, @function
	.size	set_PTE, . - set_PTE
	.text
	.align	16
	.globl set_RA
set_RA:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	0(%edx), %eax
	movl	4(%edx), %ebx
	movl	%eax, %ecx
	sall	$4, %ecx
	leal	0(%ecx,%eax,8), %eax
	movl	%ebx, (KCtxtPool_LOC + 20)(%eax)
	movl	4(%esp), %ebx
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	set_RA, @function
	.size	set_RA, . - set_RA
	.text
	.align	16
	.globl set_SP
set_SP:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	0(%edx), %eax
	movl	4(%edx), %ebx
	movl	%eax, %ecx
	sall	$4, %ecx
	leal	0(%ecx,%eax,8), %eax
	movl	%ebx, KCtxtPool_LOC(%eax)
	movl	4(%esp), %ebx
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	set_SP, @function
	.size	set_SP, . - set_SP
	.text
	.align	16
	.globl set_curid
set_curid:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	0(%edx), %eax
	movl	%eax, CURID_LOC
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	set_curid, @function
	.size	set_curid, . - set_curid
	.text
	.align	16
	.globl set_head
set_head:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	0(%edx), %eax
	movl	4(%edx), %ebx
	movl	%ebx, TDQPool_LOC(,%eax,8)
	movl	4(%esp), %ebx
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	set_head, @function
	.size	set_head, . - set_head
	.text
	.align	16
	.globl set_next
set_next:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	0(%edx), %eax
	movl	4(%edx), %ebx
	leal	0(,%eax,8), %edx
	leal	0(%edx,%eax,4), %eax
	movl	%ebx, (TCBPool_LOC + 8)(%eax)
	movl	4(%esp), %ebx
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	set_next, @function
	.size	set_next, . - set_next
	.text
	.align	16
	.globl set_norm
set_norm:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	0(%edx), %ecx
	movl	4(%edx), %ebx
	leal	0(,%ecx,8), %eax
	leal	0(%eax,%ecx,4), %eax
	movl	%ebx, AT_LOC(%eax)
	xorl	%edx, %edx
	movl	%edx, (AT_LOC + 4)(%eax)
	xorl	%edx, %edx
	movl	%edx, (AT_LOC + 8)(%eax)
	movl	4(%esp), %ebx
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	set_norm, @function
	.size	set_norm, . - set_norm
	.text
	.align	16
	.globl set_nps
set_nps:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	0(%edx), %eax
	movl	%eax, NPS_LOC
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	set_nps, @function
	.size	set_nps, . - set_nps
	.text
	.align	16
	.globl set_prev
set_prev:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	0(%edx), %eax
	movl	4(%edx), %ebx
	leal	0(,%eax,8), %edx
	leal	0(%edx,%eax,4), %eax
	movl	%ebx, (TCBPool_LOC + 4)(%eax)
	movl	4(%esp), %ebx
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	set_prev, @function
	.size	set_prev, . - set_prev
	.text
	.align	16
	.globl set_pt
set_pt:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 4(%esp)
	movl	0(%edx), %eax
	sall	$12, %eax
	leal	PTPool_LOC(%eax), %ecx
	movl	%ecx, 0(%esp)
	call	set_cr3
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	set_pt, @function
	.size	set_pt, . - set_pt
	.text
	.align	16
	.globl set_shared_mem_loc
set_shared_mem_loc:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	%esi, 8(%esp)
	movl	0(%edx), %eax
	movl	4(%edx), %esi
	movl	8(%edx), %ebx
	movl	%eax, %ecx
	sall	$8, %ecx
	sall	$9, %eax
	leal	0(%ecx,%eax,1), %eax
	leal	SHRDMEMPOOL_LOC(%eax), %edx
	leal	0(,%esi,8), %ecx
	leal	0(%ecx,%esi,4), %eax
	movl	%ebx, 0(%edx,%eax,1)
	movl	4(%esp), %ebx
	movl	8(%esp), %esi
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	set_shared_mem_loc, @function
	.size	set_shared_mem_loc, . - set_shared_mem_loc
	.text
	.align	16
	.globl set_shared_mem_seen
set_shared_mem_seen:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	%esi, 8(%esp)
	movl	0(%edx), %eax
	movl	4(%edx), %esi
	movl	8(%edx), %ebx
	movl	%eax, %ecx
	sall	$8, %ecx
	sall	$9, %eax
	leal	0(%ecx,%eax,1), %eax
	leal	SHRDMEMPOOL_LOC(%eax), %edx
	leal	0(,%esi,8), %ecx
	leal	0(%ecx,%esi,4), %eax
	movl	%ebx, 8(%edx,%eax,1)
	movl	4(%esp), %ebx
	movl	8(%esp), %esi
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	set_shared_mem_seen, @function
	.size	set_shared_mem_seen, . - set_shared_mem_seen
	.text
	.align	16
	.globl set_shared_mem_state
set_shared_mem_state:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	%esi, 8(%esp)
	movl	0(%edx), %eax
	movl	4(%edx), %esi
	movl	8(%edx), %ebx
	movl	%eax, %ecx
	sall	$8, %ecx
	sall	$9, %eax
	leal	0(%ecx,%eax,1), %eax
	leal	SHRDMEMPOOL_LOC(%eax), %edx
	leal	0(,%esi,8), %ecx
	leal	0(%ecx,%esi,4), %eax
	movl	%ebx, 4(%edx,%eax,1)
	movl	4(%esp), %ebx
	movl	8(%esp), %esi
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	set_shared_mem_state, @function
	.size	set_shared_mem_state, . - set_shared_mem_state
	.text
	.align	16
	.globl set_state
set_state:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	0(%edx), %eax
	movl	4(%edx), %ebx
	leal	0(,%eax,8), %edx
	leal	0(%edx,%eax,4), %eax
	movl	%ebx, TCBPool_LOC(%eax)
	movl	4(%esp), %ebx
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	set_state, @function
	.size	set_state, . - set_state
	.text
	.align	16
	.globl set_sync_chan_count
set_sync_chan_count:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	0(%edx), %eax
	movl	4(%edx), %ebx
	leal	0(,%eax,8), %edx
	leal	0(%edx,%eax,4), %eax
	movl	%ebx, (SYNCCHPOOL_LOC + 8)(%eax)
	movl	4(%esp), %ebx
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	set_sync_chan_count, @function
	.size	set_sync_chan_count, . - set_sync_chan_count
	.text
	.align	16
	.globl set_sync_chan_paddr
set_sync_chan_paddr:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	0(%edx), %eax
	movl	4(%edx), %ebx
	leal	0(,%eax,8), %edx
	leal	0(%edx,%eax,4), %eax
	movl	%ebx, (SYNCCHPOOL_LOC + 4)(%eax)
	movl	4(%esp), %ebx
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	set_sync_chan_paddr, @function
	.size	set_sync_chan_paddr, . - set_sync_chan_paddr
	.text
	.align	16
	.globl set_sync_chan_to
set_sync_chan_to:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	0(%edx), %eax
	movl	4(%edx), %ebx
	leal	0(,%eax,8), %edx
	leal	0(%edx,%eax,4), %eax
	movl	%ebx, SYNCCHPOOL_LOC(%eax)
	movl	4(%esp), %ebx
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	set_sync_chan_to, @function
	.size	set_sync_chan_to, . - set_sync_chan_to
	.text
	.align	16
	.globl set_tail
set_tail:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	0(%edx), %eax
	movl	4(%edx), %ebx
	movl	%ebx, (TDQPool_LOC + 4)(,%eax,8)
	movl	4(%esp), %ebx
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	set_tail, @function
	.size	set_tail, . - set_tail
	.text
	.align	16
	.globl shared_mem_init
shared_mem_init:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	%esi, 16(%esp)
	movl	0(%edx), %ecx
	movl	%ecx, 0(%esp)
	call	pmap_init
	xorl	%ebx, %ebx
.L168:
	xorl	%esi, %esi
.L169:
	movl	%ebx, 0(%esp)
	movl	%esi, 4(%esp)
	call	clear_shared_mem
	leal	1(%esi), %esi
	cmpl	$64, %esi
	jb	.L169
	leal	1(%ebx), %ebx
	cmpl	$64, %ebx
	jb	.L168
	movl	12(%esp), %ebx
	movl	16(%esp), %esi
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	shared_mem_init, @function
	.size	shared_mem_init, . - shared_mem_init
	.text
	.align	16
	.globl shared_mem_status
shared_mem_status:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 12(%esp)
	movl	%ebx, 16(%esp)
	movl	%esi, 20(%esp)
	movl	0(%edx), %esi
	movl	4(%edx), %ebx
	movl	%esi, 0(%esp)
	movl	%ebx, 4(%esp)
	call	get_shared_mem_seen
	testl	%eax, %eax
	jne	.L170
	movl	$1, %edx
	movl	%esi, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	%edx, 8(%esp)
	call	set_shared_mem_seen
	movl	%esi, 0(%esp)
	movl	%ebx, 4(%esp)
	call	get_shared_mem_state
	jmp	.L171
.L170:
	movl	%esi, 0(%esp)
	movl	%ebx, 4(%esp)
	call	get_shared_mem_status_seen
.L171:
	movl	16(%esp), %ebx
	movl	20(%esp), %esi
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	shared_mem_status, @function
	.size	shared_mem_status, . - shared_mem_status
	.text
	.align	16
	.globl shared_mem_to_dead
shared_mem_to_dead:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 12(%esp)
	movl	%ebx, 16(%esp)
	movl	%esi, 20(%esp)
	movl	0(%edx), %esi
	movl	4(%edx), %ebx
	movl	$2, %ecx
	movl	%esi, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	%ecx, 8(%esp)
	call	set_shared_mem_state
	movl	$1, %eax
	movl	%esi, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	%eax, 8(%esp)
	call	set_shared_mem_seen
	xorl	%eax, %eax
	movl	%esi, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	%eax, 8(%esp)
	call	set_shared_mem_loc
	movl	$2, %eax
	movl	%ebx, 0(%esp)
	movl	%esi, 4(%esp)
	movl	%eax, 8(%esp)
	call	set_shared_mem_state
	xorl	%edx, %edx
	movl	%ebx, 0(%esp)
	movl	%esi, 4(%esp)
	movl	%edx, 8(%esp)
	call	set_shared_mem_seen
	xorl	%edx, %edx
	movl	%ebx, 0(%esp)
	movl	%esi, 4(%esp)
	movl	%edx, 8(%esp)
	call	set_shared_mem_loc
	movl	16(%esp), %ebx
	movl	20(%esp), %esi
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	shared_mem_to_dead, @function
	.size	shared_mem_to_dead, . - shared_mem_to_dead
	.text
	.align	16
	.globl shared_mem_to_pending
shared_mem_to_pending:
	.cfi_startproc
	subl	$36, %esp
	.cfi_adjust_cfa_offset	36
	leal	40(%esp), %edx
	movl	%edx, 12(%esp)
	movl	%ebx, 16(%esp)
	movl	%esi, 20(%esp)
	movl	%edi, 24(%esp)
	movl	0(%edx), %edi
	movl	4(%edx), %esi
	movl	8(%edx), %ebx
	movl	$1, %edx
	movl	%edi, 0(%esp)
	movl	%esi, 4(%esp)
	movl	%edx, 8(%esp)
	call	set_shared_mem_state
	movl	$1, %edx
	movl	%edi, 0(%esp)
	movl	%esi, 4(%esp)
	movl	%edx, 8(%esp)
	call	set_shared_mem_seen
	movl	%edi, 0(%esp)
	movl	%esi, 4(%esp)
	movl	%ebx, 8(%esp)
	call	set_shared_mem_loc
	movl	16(%esp), %ebx
	movl	20(%esp), %esi
	movl	24(%esp), %edi
	addl	$36, %esp
	ret
	.cfi_endproc
	.type	shared_mem_to_pending, @function
	.size	shared_mem_to_pending, . - shared_mem_to_pending
	.text
	.align	16
	.globl shared_mem_to_ready
shared_mem_to_ready:
	.cfi_startproc
	subl	$44, %esp
	.cfi_adjust_cfa_offset	44
	leal	48(%esp), %edx
	movl	%edx, 24(%esp)
	movl	%ebx, 28(%esp)
	movl	%esi, 32(%esp)
	movl	%edi, 36(%esp)
	movl	0(%edx), %esi
	movl	4(%edx), %edi
	movl	8(%edx), %ebx
	movl	%edi, 0(%esp)
	movl	%esi, 4(%esp)
	call	get_shared_mem_loc
	movl	$7, %edx
	movl	$7, %ecx
	movl	%esi, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	%edx, 8(%esp)
	movl	%edi, 12(%esp)
	movl	%eax, 16(%esp)
	movl	%ecx, 20(%esp)
	call	pt_resv2
	movl	%eax, %ebx
	cmpl	$1048577, %ebx
	je	.L172
	xorl	%eax, %eax
	movl	%esi, 0(%esp)
	movl	%edi, 4(%esp)
	movl	%eax, 8(%esp)
	call	set_shared_mem_state
	movl	$1, %edx
	movl	%esi, 0(%esp)
	movl	%edi, 4(%esp)
	movl	%edx, 8(%esp)
	call	set_shared_mem_seen
	xorl	%eax, %eax
	movl	%esi, 0(%esp)
	movl	%edi, 4(%esp)
	movl	%eax, 8(%esp)
	call	set_shared_mem_loc
	xorl	%eax, %eax
	movl	%edi, 0(%esp)
	movl	%esi, 4(%esp)
	movl	%eax, 8(%esp)
	call	set_shared_mem_state
	xorl	%eax, %eax
	movl	%edi, 0(%esp)
	movl	%esi, 4(%esp)
	movl	%eax, 8(%esp)
	call	set_shared_mem_seen
	xorl	%edx, %edx
	movl	%edi, 0(%esp)
	movl	%esi, 4(%esp)
	movl	%edx, 8(%esp)
	call	set_shared_mem_loc
.L172:
	movl	%ebx, %eax
	movl	28(%esp), %ebx
	movl	32(%esp), %esi
	movl	36(%esp), %edi
	addl	$44, %esp
	ret
	.cfi_endproc
	.type	shared_mem_to_ready, @function
	.size	shared_mem_to_ready, . - shared_mem_to_ready
	.text
	.align	16
	.globl syncreceive_chan
syncreceive_chan:
	.cfi_startproc
	subl	$44, %esp
	.cfi_adjust_cfa_offset	44
	leal	48(%esp), %edx
	movl	%edx, 12(%esp)
	movl	%ebx, 16(%esp)
	movl	%esi, 20(%esp)
	movl	%edi, 24(%esp)
	movl	%ebp, 28(%esp)
	movl	0(%edx), %ebp
	movl	4(%edx), %eax
	movl	%eax, 36(%esp)
	movl	8(%edx), %edi
	call	get_curid
	movl	%eax, %esi
	movl	%ebp, 0(%esp)
	call	get_state
	cmpl	$3, %eax
	je	.L173
	movl	%ebp, 0(%esp)
	call	get_sync_chan_to
	cmpl	%esi, %eax
	jne	.L174
	movl	%ebp, 0(%esp)
	call	get_sync_chan_count
	movl	%eax, %ebx
	movl	%ebp, 0(%esp)
	call	get_sync_chan_paddr
	movl	%eax, 32(%esp)
	cmpl	%edi, %ebx
	jae	.L175
	movl	%ebx, %edi
.L175:
	movl	%esi, 0(%esp)
	movl	36(%esp), %ecx
	movl	%ecx, 4(%esp)
	call	get_kernel_pa
	movl	%edi, 0(%esp)
	movl	32(%esp), %ecx
	movl	%ecx, 4(%esp)
	movl	%eax, 8(%esp)
	call	flatmem_copy
	movl	$64, %eax
	movl	%ebp, 0(%esp)
	movl	%eax, 4(%esp)
	call	set_sync_chan_to
	xorl	%ecx, %ecx
	movl	%ebp, 0(%esp)
	movl	%ecx, 4(%esp)
	call	set_sync_chan_paddr
	movl	%ebp, 0(%esp)
	movl	%edi, 4(%esp)
	call	set_sync_chan_count
	movl	%ebp, 0(%esp)
	call	thread_wakeup
	movl	%edi, %eax
	jmp	.L176
.L174:
	movl	$1027, %eax
	jmp	.L176
.L173:
	movl	$1026, %eax
.L176:
	movl	16(%esp), %ebx
	movl	20(%esp), %esi
	movl	24(%esp), %edi
	movl	28(%esp), %ebp
	addl	$44, %esp
	ret
	.cfi_endproc
	.type	syncreceive_chan, @function
	.size	syncreceive_chan, . - syncreceive_chan
	.text
	.align	16
	.globl syncsendto_chan_post
syncsendto_chan_post:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	call	get_curid
	movl	%eax, %ebx
	movl	%ebx, 0(%esp)
	call	get_sync_chan_to
	cmpl	$64, %eax
	je	.L177
	movl	$64, %ecx
	movl	%ebx, 0(%esp)
	movl	%ecx, 4(%esp)
	call	set_sync_chan_to
	movl	$1027, %eax
	jmp	.L178
.L177:
	movl	%ebx, 0(%esp)
	call	get_sync_chan_count
.L178:
	movl	12(%esp), %ebx
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	syncsendto_chan_post, @function
	.size	syncsendto_chan_post, . - syncsendto_chan_post
	.text
	.align	16
	.globl syncsendto_chan_pre
syncsendto_chan_pre:
	.cfi_startproc
	subl	$36, %esp
	.cfi_adjust_cfa_offset	36
	leal	40(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	%esi, 16(%esp)
	movl	%edi, 20(%esp)
	movl	%ebp, 24(%esp)
	movl	0(%edx), %esi
	movl	4(%edx), %ebp
	movl	8(%edx), %edi
	movl	%esi, 0(%esp)
	call	get_state
	cmpl	$3, %eax
	je	.L179
	cmpl	$0, %esi
	jb	.L180
	cmpl	$64, %esi
	jae	.L180
	call	get_curid
	movl	%eax, %ebx
	movl	%ebx, 0(%esp)
	movl	%ebp, 4(%esp)
	call	get_kernel_pa
	cmpl	$1024, %edi
	jb	.L181
	movl	%ebx, 0(%esp)
	movl	%eax, 4(%esp)
	call	set_sync_chan_paddr
	movl	$1024, %ecx
	movl	%ebx, 0(%esp)
	movl	%ecx, 4(%esp)
	call	set_sync_chan_count
	jmp	.L182
.L181:
	movl	%ebx, 0(%esp)
	movl	%eax, 4(%esp)
	call	set_sync_chan_paddr
	movl	%ebx, 0(%esp)
	movl	%edi, 4(%esp)
	call	set_sync_chan_count
.L182:
	movl	%ebx, 0(%esp)
	call	get_sync_chan_to
	cmpl	$64, %eax
	jne	.L183
	movl	%ebx, 0(%esp)
	movl	%esi, 4(%esp)
	call	set_sync_chan_to
.L183:
	movl	%ebx, %eax
	jmp	.L184
.L180:
	movl	$1025, %eax
	jmp	.L184
.L179:
	movl	$1026, %eax
.L184:
	movl	12(%esp), %ebx
	movl	16(%esp), %esi
	movl	20(%esp), %edi
	movl	24(%esp), %ebp
	addl	$36, %esp
	ret
	.cfi_endproc
	.type	syncsendto_chan_pre, @function
	.size	syncsendto_chan_pre, . - syncsendto_chan_pre
	.text
	.align	16
	.globl sys_get_quota
sys_get_quota:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 4(%esp)
	movl	%ebx, 8(%esp)
	movl	%esi, 12(%esp)
	call	get_curid
	movl	%eax, %ebx
	movl	%ebx, 0(%esp)
	call	container_get_quota
	movl	%eax, %esi
	movl	%ebx, 0(%esp)
	call	container_get_usage
	subl	%eax, %esi
	movl	%esi, 0(%esp)
	call	uctx_set_retval1
	xorl	%eax, %eax
	movl	%eax, 0(%esp)
	call	uctx_set_errno
	movl	8(%esp), %ebx
	movl	12(%esp), %esi
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	sys_get_quota, @function
	.size	sys_get_quota, . - sys_get_quota
	.text
	.align	16
	.globl sys_offer_shared_mem
sys_offer_shared_mem:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 12(%esp)
	call	get_curid
	cmpl	$1, %eax
	jne	.L185
	call	uctx_arg2
	movl	$1, %ecx
	movl	$2, %edx
	movl	%ecx, 0(%esp)
	movl	%edx, 4(%esp)
	movl	%eax, 8(%esp)
	call	offer_shared_mem
	movl	%eax, 0(%esp)
	call	uctx_set_retval1
	xorl	%eax, %eax
	movl	%eax, 0(%esp)
	call	uctx_set_errno
	jmp	.L186
.L185:
	xorl	%eax, %eax
	movl	%eax, 0(%esp)
	call	uctx_set_errno
.L186:
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	sys_offer_shared_mem, @function
	.size	sys_offer_shared_mem, . - sys_offer_shared_mem
	.text
	.align	16
	.globl sys_proc_create
sys_proc_create:
	.cfi_startproc
	subl	$36, %esp
	.cfi_adjust_cfa_offset	36
	leal	40(%esp), %edx
	movl	%edx, 12(%esp)
	movl	%ebx, 16(%esp)
	movl	%esi, 20(%esp)
	movl	%edi, 24(%esp)
	call	get_curid
	movl	%eax, %edi
	call	uctx_arg3
	movl	%eax, %esi
	movl	%edi, 0(%esp)
	movl	%esi, 4(%esp)
	call	container_can_consume
	movl	%eax, %ebx
	movl	%edi, 0(%esp)
	call	container_get_nchildren
	movl	%eax, %edx
	cmpl	$0, %ebx
	sete	%bl
	movzbl	%bl, %ebx
	leal	4(%edi,%edi,2), %eax
	cmpl	$64, %eax
	seta	%al
	movzbl	%al, %eax
	movl	%eax, %edi
	cmpl	$3, %edx
	sete	%dl
	movzbl	%dl, %edx
	orl	%edx, %edi
	orl	%edi, %ebx
	testl	%ebx, %ebx
	jne	.L187
	call	uctx_arg2
	leal	ELF_LOC, %ecx
	movl	ELF_ENTRY_LOC(,%eax,4), %edx
	movl	%ecx, 0(%esp)
	movl	%edx, 4(%esp)
	movl	%esi, 8(%esp)
	call	proc_create
	movl	%eax, 0(%esp)
	call	uctx_set_retval1
	xorl	%ecx, %ecx
	movl	%ecx, 0(%esp)
	call	uctx_set_errno
	jmp	.L188
.L187:
	movl	$1, %eax
	movl	%eax, 0(%esp)
	call	uctx_set_errno
.L188:
	movl	16(%esp), %ebx
	movl	20(%esp), %esi
	movl	24(%esp), %edi
	addl	$36, %esp
	ret
	.cfi_endproc
	.type	sys_proc_create, @function
	.size	sys_proc_create, . - sys_proc_create
	.text
	.align	16
	.globl sys_receive_chan
sys_receive_chan:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 12(%esp)
	movl	%ebx, 16(%esp)
	movl	%esi, 20(%esp)
	call	uctx_arg2
	movl	%eax, %ebx
	call	uctx_arg3
	movl	%eax, %esi
	call	uctx_arg4
	movl	%ebx, 0(%esp)
	movl	%esi, 4(%esp)
	movl	%eax, 8(%esp)
	call	syncreceive_chan
	movl	%eax, 0(%esp)
	call	uctx_set_retval1
	xorl	%ecx, %ecx
	movl	%ecx, 0(%esp)
	call	uctx_set_errno
	movl	16(%esp), %ebx
	movl	20(%esp), %esi
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	sys_receive_chan, @function
	.size	sys_receive_chan, . - sys_receive_chan
	.text
	.align	16
	.globl sys_yield
sys_yield:
	.cfi_startproc
	call	proc_exit_user
	movl	$proc_start_user, 0(%esp)
	jmp	thread_yield
	.cfi_endproc
	.type	sys_yield, @function
	.size	sys_yield, . - sys_yield
	.text
	.align	16
	.globl syscall_dispatch
syscall_dispatch:
	.cfi_startproc
	call	proc_exit_user
	call	syscall_dispatch_C
	call	proc_start_user
	.cfi_endproc
	.type	syscall_dispatch, @function
	.size	syscall_dispatch, . - syscall_dispatch
	.text
	.align	16
	.globl syscall_dispatch_C
syscall_dispatch_C:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 4(%esp)
	call	uctx_arg1
	cmpl	$2, %eax
	je	.L189
	cmpl	$26, %eax
	je	.L190
	cmpl	$27, %eax
	je	.L191
	cmpl	$28, %eax
	je	.L192
	movl	$3, %eax
	movl	%eax, 0(%esp)
	call	uctx_set_errno
	addl	$12, %esp
	ret
.L192:
	addl	$12, %esp
	jmp	print
.L191:
	addl	$12, %esp
	jmp	sys_offer_shared_mem
.L190:
	addl	$12, %esp
	jmp	sys_get_quota
.L189:
	addl	$12, %esp
	jmp	sys_proc_create
	.cfi_endproc
	.type	syscall_dispatch_C, @function
	.size	syscall_dispatch_C, . - syscall_dispatch_C
	.text
	.align	16
	.globl tcb_init
tcb_init:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	0(%edx), %ecx
	leal	0(,%ecx,8), %edx
	leal	0(%edx,%ecx,4), %eax
	movl	$3, %edx
	movl	%edx, TCBPool_LOC(%eax)
	movl	$64, %ecx
	movl	%ecx, (TCBPool_LOC + 4)(%eax)
	movl	$64, %edx
	movl	%edx, (TCBPool_LOC + 8)(%eax)
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	tcb_init, @function
	.size	tcb_init, . - tcb_init
	.text
	.align	16
	.globl tdq_init
tdq_init:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	0(%edx), %ecx
	movl	$64, %eax
	movl	%eax, TDQPool_LOC(,%ecx,8)
	movl	$64, %edx
	movl	%edx, (TDQPool_LOC + 4)(,%ecx,8)
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	tdq_init, @function
	.size	tdq_init, . - tdq_init
	.text
	.align	16
	.globl tdqueue_init
tdqueue_init:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 4(%esp)
	movl	%ebx, 8(%esp)
	movl	0(%edx), %eax
	movl	%eax, 0(%esp)
	call	thread_init
	xorl	%ebx, %ebx
.L193:
	movl	%ebx, 0(%esp)
	call	tdq_init
	leal	1(%ebx), %ebx
	cmpl	$65, %ebx
	jb	.L193
	movl	8(%esp), %ebx
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	tdqueue_init, @function
	.size	tdqueue_init, . - tdqueue_init
	.text
	.align	16
	.globl thread_init
thread_init:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 4(%esp)
	movl	%ebx, 8(%esp)
	movl	0(%edx), %eax
	movl	%eax, 0(%esp)
	call	shared_mem_init
	xorl	%ebx, %ebx
.L194:
	movl	%ebx, 0(%esp)
	call	tcb_init
	leal	1(%ebx), %ebx
	cmpl	$64, %ebx
	jb	.L194
	movl	8(%esp), %ebx
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	thread_init, @function
	.size	thread_init, . - thread_init
	.text
	.align	16
	.globl thread_sched
thread_sched:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 8(%esp)
	movl	$64, %eax
	movl	%eax, 0(%esp)
	call	dequeue
	movl	%eax, 0(%esp)
	movl	$1, %eax
	movl	%eax, 4(%esp)
	call	set_state
	call	get_curid
	movl	%eax, 4(%esp)
	call	set_curid
	call	clear_cr2
	movl	0(%esp), %edx
	movl	4(%esp), %eax
	addl	$12, %esp
	jmp	kctxt_switch
	.cfi_endproc
	.type	thread_sched, @function
	.size	thread_sched, . - thread_sched
	.text
	.align	16
	.globl thread_sleep
thread_sleep:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 12(%esp)
	movl	0(%edx), %eax
	movl	%eax, 8(%esp)
	call	get_curid
	movl	%eax, 0(%esp)
	movl	$2, %eax
	movl	%eax, 4(%esp)
	call	set_state
	movl	0(%esp), %eax
	movl	%eax, 4(%esp)
	movl	8(%esp), %eax
	movl	%eax, 0(%esp)
	call	enqueue
	addl	$20, %esp
	jmp	thread_sched
	.cfi_endproc
	.type	thread_sleep, @function
	.size	thread_sleep, . - thread_sleep
	.text
	.align	16
	.globl thread_spawn
thread_spawn:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 12(%esp)
	movl	%ebx, 16(%esp)
	movl	%esi, 20(%esp)
	movl	0(%edx), %eax
	movl	4(%edx), %ebx
	movl	8(%edx), %esi
	movl	%eax, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	%esi, 8(%esp)
	call	kctxt_new
	movl	%eax, %ebx
	xorl	%edx, %edx
	movl	%ebx, 0(%esp)
	movl	%edx, 4(%esp)
	call	set_state
	movl	$64, %eax
	movl	%eax, 0(%esp)
	movl	%ebx, 4(%esp)
	call	enqueue
	movl	%ebx, %eax
	movl	16(%esp), %ebx
	movl	20(%esp), %esi
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	thread_spawn, @function
	.size	thread_spawn, . - thread_spawn
	.text
	.align	16
	.globl thread_wakeup
thread_wakeup:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 8(%esp)
	movl	%ebx, 12(%esp)
	movl	0(%edx), %ecx
	movl	%ecx, 0(%esp)
	call	dequeue
	movl	%eax, %ebx
	cmpl	$64, %ebx
	je	.L195
	xorl	%eax, %eax
	movl	%ebx, 0(%esp)
	movl	%eax, 4(%esp)
	call	set_state
	movl	$64, %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	call	enqueue
.L195:
	movl	12(%esp), %ebx
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	thread_wakeup, @function
	.size	thread_wakeup, . - thread_wakeup
	.text
	.align	16
	.globl thread_yield
thread_yield:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 8(%esp)
	call	get_curid
	movl	%eax, 0(%esp)
	movl	$0, %eax
	movl	%eax, 4(%esp)
	call	set_state
	movl	0(%esp), %eax
	movl	%eax, 4(%esp)
	movl	$64, %eax
	movl	%eax, 0(%esp)
	call	enqueue
	addl	$12, %esp
	jmp	thread_sched
	.cfi_endproc
	.type	thread_yield, @function
	.size	thread_yield, . - thread_yield
	.text
	.align	16
	.globl trap_sendtochan_post
trap_sendtochan_post:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 4(%esp)
	call	syncsendto_chan_post
	movl	%eax, 0(%esp)
	call	uctx_set_retval1
	xorl	%eax, %eax
	movl	%eax, 0(%esp)
	call	uctx_set_errno
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	trap_sendtochan_post, @function
	.size	trap_sendtochan_post, . - trap_sendtochan_post
	.text
	.align	16
	.globl trap_sendtochan_pre
trap_sendtochan_pre:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 12(%esp)
	movl	%ebx, 16(%esp)
	movl	%esi, 20(%esp)
	call	uctx_arg2
	movl	%eax, %ebx
	call	uctx_arg3
	movl	%eax, %esi
	call	uctx_arg4
	movl	%ebx, 0(%esp)
	movl	%esi, 4(%esp)
	movl	%eax, 8(%esp)
	call	syncsendto_chan_pre
	movl	16(%esp), %ebx
	movl	20(%esp), %esi
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	trap_sendtochan_pre, @function
	.size	trap_sendtochan_pre, . - trap_sendtochan_pre
	.text
	.align	16
	.globl uctx_arg1
uctx_arg1:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 8(%esp)
	call	get_curid
	movl	$7, %ecx
	movl	%eax, 0(%esp)
	movl	%ecx, 4(%esp)
	call	uctx_get
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	uctx_arg1, @function
	.size	uctx_arg1, . - uctx_arg1
	.text
	.align	16
	.globl uctx_arg2
uctx_arg2:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 8(%esp)
	call	get_curid
	movl	$4, %ecx
	movl	%eax, 0(%esp)
	movl	%ecx, 4(%esp)
	call	uctx_get
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	uctx_arg2, @function
	.size	uctx_arg2, . - uctx_arg2
	.text
	.align	16
	.globl uctx_arg3
uctx_arg3:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 8(%esp)
	call	get_curid
	movl	$6, %ecx
	movl	%eax, 0(%esp)
	movl	%ecx, 4(%esp)
	call	uctx_get
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	uctx_arg3, @function
	.size	uctx_arg3, . - uctx_arg3
	.text
	.align	16
	.globl uctx_arg4
uctx_arg4:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 8(%esp)
	call	get_curid
	movl	$5, %ecx
	movl	%eax, 0(%esp)
	movl	%ecx, 4(%esp)
	call	uctx_get
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	uctx_arg4, @function
	.size	uctx_arg4, . - uctx_arg4
	.text
	.align	16
	.globl uctx_arg5
uctx_arg5:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 8(%esp)
	call	get_curid
	movl	$1, %ecx
	movl	%eax, 0(%esp)
	movl	%ecx, 4(%esp)
	call	uctx_get
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	uctx_arg5, @function
	.size	uctx_arg5, . - uctx_arg5
	.text
	.align	16
	.globl uctx_arg6
uctx_arg6:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 8(%esp)
	call	get_curid
	xorl	%ecx, %ecx
	movl	%eax, 0(%esp)
	movl	%ecx, 4(%esp)
	call	uctx_get
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	uctx_arg6, @function
	.size	uctx_arg6, . - uctx_arg6
	.text
	.align	16
	.globl uctx_get
uctx_get:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	0(%edx), %eax
	movl	4(%edx), %ebx
	movl	%eax, %ecx
	sall	$6, %ecx
	leal	0(%ecx,%eax,4), %eax
	leal	UCTX_LOC(%eax), %ecx
	movl	0(%ecx,%ebx,4), %eax
	movl	4(%esp), %ebx
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	uctx_get, @function
	.size	uctx_get, . - uctx_get
	.text
	.align	16
	.globl uctx_set
uctx_set:
	.cfi_startproc
	subl	$20, %esp
	.cfi_adjust_cfa_offset	20
	leal	24(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	%esi, 8(%esp)
	movl	0(%edx), %eax
	movl	4(%edx), %esi
	movl	8(%edx), %ebx
	movl	%eax, %ecx
	sall	$6, %ecx
	leal	0(%ecx,%eax,4), %eax
	leal	UCTX_LOC(%eax), %ecx
	movl	%ebx, 0(%ecx,%esi,4)
	movl	4(%esp), %ebx
	movl	8(%esp), %esi
	addl	$20, %esp
	ret
	.cfi_endproc
	.type	uctx_set, @function
	.size	uctx_set, . - uctx_set
	.text
	.align	16
	.globl uctx_set_eip
uctx_set_eip:
	.cfi_startproc
	subl	$12, %esp
	.cfi_adjust_cfa_offset	12
	leal	16(%esp), %edx
	movl	%edx, 0(%esp)
	movl	%ebx, 4(%esp)
	movl	0(%edx), %eax
	movl	4(%edx), %ebx
	movl	%eax, %ecx
	sall	$6, %ecx
	leal	0(%ecx,%eax,4), %eax
	movl	%ebx, (UCTX_LOC + 48)(%eax)
	movl	4(%esp), %ebx
	addl	$12, %esp
	ret
	.cfi_endproc
	.type	uctx_set_eip, @function
	.size	uctx_set_eip, . - uctx_set_eip
	.text
	.align	16
	.globl uctx_set_errno
uctx_set_errno:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 12(%esp)
	movl	%ebx, 16(%esp)
	movl	0(%edx), %ebx
	call	get_curid
	movl	$7, %ecx
	movl	%eax, 0(%esp)
	movl	%ecx, 4(%esp)
	movl	%ebx, 8(%esp)
	call	uctx_set
	movl	16(%esp), %ebx
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	uctx_set_errno, @function
	.size	uctx_set_errno, . - uctx_set_errno
	.text
	.align	16
	.globl uctx_set_retval1
uctx_set_retval1:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 12(%esp)
	movl	%ebx, 16(%esp)
	movl	0(%edx), %ebx
	call	get_curid
	movl	$4, %ecx
	movl	%eax, 0(%esp)
	movl	%ecx, 4(%esp)
	movl	%ebx, 8(%esp)
	call	uctx_set
	movl	16(%esp), %ebx
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	uctx_set_retval1, @function
	.size	uctx_set_retval1, . - uctx_set_retval1
	.text
	.align	16
	.globl uctx_set_retval2
uctx_set_retval2:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 12(%esp)
	movl	%ebx, 16(%esp)
	movl	0(%edx), %ebx
	call	get_curid
	movl	$6, %ecx
	movl	%eax, 0(%esp)
	movl	%ecx, 4(%esp)
	movl	%ebx, 8(%esp)
	call	uctx_set
	movl	16(%esp), %ebx
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	uctx_set_retval2, @function
	.size	uctx_set_retval2, . - uctx_set_retval2
	.text
	.align	16
	.globl uctx_set_retval3
uctx_set_retval3:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 12(%esp)
	movl	%ebx, 16(%esp)
	movl	0(%edx), %ebx
	call	get_curid
	movl	$5, %ecx
	movl	%eax, 0(%esp)
	movl	%ecx, 4(%esp)
	movl	%ebx, 8(%esp)
	call	uctx_set
	movl	16(%esp), %ebx
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	uctx_set_retval3, @function
	.size	uctx_set_retval3, . - uctx_set_retval3
	.text
	.align	16
	.globl uctx_set_retval4
uctx_set_retval4:
	.cfi_startproc
	subl	$28, %esp
	.cfi_adjust_cfa_offset	28
	leal	32(%esp), %edx
	movl	%edx, 12(%esp)
	movl	%ebx, 16(%esp)
	movl	0(%edx), %ebx
	call	get_curid
	movl	$1, %ecx
	movl	%eax, 0(%esp)
	movl	%ecx, 4(%esp)
	movl	%ebx, 8(%esp)
	call	uctx_set
	movl	16(%esp), %ebx
	addl	$28, %esp
	ret
	.cfi_endproc
	.type	uctx_set_retval4, @function
	.size	uctx_set_retval4, . - uctx_set_retval4
